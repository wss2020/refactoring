//曾用名：以对象取代数据值（Replace Data Value with Object）

//曾用名：以类取代类型码（Replace Type Code with Class）

//重构前
orders.filter(o => "high" === o.priority
    || "rush" === o.priority);


//重构后
orders.filter(o => o.priority.higherThan(new Priority("normal")))


/**
  动机
     开发初期，你往往决定以简单的数据项表示简单的情况，比如使用数字或字符串等。但随着开发的进行，你可能会发现，这些简单数据项不再那么简单了。
  比如说，一开始你可能会用一个字符串来表示“电话号码”的概念，但是随后它又需要“格式化”“抽取区号”之类的特殊行为。这类逻辑很快便会占领代码库，
  制造出许多重复代码，增加使用时的成本。
     一旦我发现对某个数据的操作不仅仅局限于打印时，我就会为它创建一个新类。一开始这个类也许只是简单包装一下简单类型的数据，不过只要类有了，
  日后添加的业务逻辑就有地可去了。这些小小的封装值开始可能价值甚微，但只要悉心照料，它们很快便能成长为有用的工具。创建新类无须太大的工作量，
  但我发现它们往往对代码库有深远的影响。实际上，许多经验丰富的开发者认为，这是他们的工具箱里最实用的重构手法之一——尽管其价值常为新手程序员
  所低估。
 **/

/**
 做法
     如果变量尚未被封装起来，先使用封装变量（132）封装它。
     为这个数据值创建一个简单的类。类的构造函数应该保存这个数据值，并为它提供一个取值函数。
     执行静态检查。
     修改第一步得到的设值函数，令其创建一个新类的对象并将其存入字段，如果有必要的话，同时修改字段的类型声明。
     修改取值函数，令其调用新类的取值函数，并返回结果。测试。
     考虑对第一步得到的访问函数使用函数改名（124），以便更好反映其用途。考虑应用将引用对象改为值对象（252）或将值对象改为引用对象（256），
 明确指出新对象的角色是值对象还是引用对象。
 **/
















