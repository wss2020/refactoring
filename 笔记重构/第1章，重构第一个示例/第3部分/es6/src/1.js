/*

使演出计算器表现出多态性

又到了观摩代码的时刻，让我们来看看，为计算器引入多态会对代码库有什么影响。


代码量仍然有所增加，因为我再次整理了代码结构。
新结构带来的好处是，不同戏剧种类的计算各自集中到了一处地方。
如果大多数修改都涉及特定类型的计算，像这样按类型进行分离就很有意义。
当添加新剧种时，只需要添加一个子类，并在创建函数中返回它。

这个示例还揭示了一些关于此类继承方案何时适用的洞见。
上面我将条件分支的查找从两个不同的函数（amountFor和volumeCreditsFor）
搬移到一个集中的构造函数createPerformanceCalculator中。有越多的函数依赖于同一套类型进行多态，这种继承方案就越有益处。

除了这样设计，还有另一种可能的方案，
那就是让createStatementData返回计算器实例本身，而非自己拿到计算器来填充中转数据结构。

JavaScript的类设计有不少好特性，
例如，取值函数用起来就像普通的数据存取。
我在考量是“直接返回实例本身”还是“返回计算好的中转数据”时，主要看数据的使用者是谁。
在这个例子中，我更想通过中转数据结构来展示如何以此隐藏计算器背后的多态设计。




结束语：
这是一个简单的例子，但我希望它能让你对“重构怎么做”有一点感觉。
例中我已经示范了数种重构手法，包括提炼函数（106）、内联变量（123）、搬移函数（198）和以多态取代条件表达式（272）等。

本章的重构有3个较为重要的节点，
分别是：将原函数分解成一组嵌套的函数、应用拆分阶段（154）分离计算逻辑与输出格式化逻辑，以及为计算器引入多态性来处理计算逻辑。每一步都给代码添加了更多的结构，以便我能更好地表达代码的意图。

一般来说，重构早期的主要动力是尝试理解代码如何工作。
通常你需要先通读代码，找到一些感觉，然后再通过重构将这些感觉从脑海里搬回到代码中。
清晰的代码更容易理解，使你能够发现更深层次的设计问题，从而形成积极正向的反馈环。
当然，这个示例仍有值得改进的地方，但现在测试仍能全部通过，代码相比初见时已经有了巨大的改善，所以我已经可以满足了。

我谈论的是如何改善代码，但什么样的代码才算好代码，程序员们有很多争论。
我偏爱小的、命名良好的函数，也知道有些人反对这个观点。
如果我们说这只关乎美学，只是各花入各眼，没有好坏高低之分，那除了诉诸个人品味，就没有任何客观事实依据了。
但我坚信，这不仅关乎个人品味，而且是有客观标准的。
我认为，好代码的检验标准就是人们是否能轻而易举地修改它。
好代码应该直截了当：有人需要修改代码时，他们应能轻易找到修改点，应该能快速做出更改，而不易引入其他错误。
一个健康的代码库能够最大限度地提升我们的生产力，支持我们更快、更低成本地为用户添加新特性。
为了保持代码库的健康，就需要时刻留意现状与理想之间的差距，然后通过重构不断接近这个理想。

好代码的检验标准就是人们是否能轻而易举地修改它。

这个示例告诉我们最重要的一点就是重构的节奏感。
无论何时，当我向人们展示我如何重构时，无人不讶异于我的步子之小，并且每一步都保证代码处于编译通过和测试通过的可工作状态。
20年前，当Kent Beck在底特律的一家宾馆里向我展示同样的手法时，我也报以同样的震撼。
开展高效有序的重构，
关键的心得是：小的步子可以更快前进，请保持代码永远处于可工作状态，小步修改累积起来也能大大改善系统的设计。
这几点请君牢记，其余的我已无需多言。


P81     P120
*
* */
















































