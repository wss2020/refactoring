/*
在不同的编程语言环境中，“找到所有调用旧函数的地方”这件事的难度也各异。
静态类型加上趁手的IDE能提供最好的体验，通常可以全自动地完成函数改名，出错的概率极低。
如果没有静态类型，就需要多花些工夫：即便再好的搜索工具，也可能会找出很多同名但并非同一函数的地方。

增减参数的做法也相同：找出所有调用者，修改函数声明，然后修改调用者。
最好是能分步骤修改：如果既想给函数改名，又想添加参数，我会先完成改名，测试，然后添加参数，然后再次测试。

这个重构的简单做法缺点在于，我必须一次性修改所有调用者和函数声明（或者说，所有的函数声明，如果有多态的话）。
如果只有不多的几处调用者，或者如果有可靠的自动化重构工具，这样做是没问题的。
但如果调用者很多，事情就会变得很棘手。

另外，如果函数的名字并不唯一，也可能造成问题。
例如，我想给代表“人”的Person类的changeAddress函数改名，
但同时在代表“保险合同”的InsuranceAgreement类中也有一个同名的函数，而我并不想修改后者的名字。
修改越是复杂，我就越不希望一步到位地完成。
如果有这些问题出现，我就会改为使用迁移式做法。
同样，如果使用简单做法时出了什么错，我也会把代码回滚到上一个已知正确的状态，并改用迁移式做法再来一遍。

* */



//还是这个名字太过简略的函数：
function circum(radius) {
    return 2 * Math.PI * radius;
}


//按照迁移式做法，我首先要对整个函数体使用提炼函数（106）：
function circum(radius) {
    return circumference(radius);
}
function circumference(radius) {
    return 2 * Math.PI * radius;
}

/*
   此时我要执行测试，然后对旧函数使用内联函数（115）：找出所有调用旧函数的地方，将其改为调用新函数。每次修改之后都可以执行测试，这样我就可以小步前进，
每次修改一处调用者。所有调用者都修改完之后，我就可以删除旧函数。
 */
















































































