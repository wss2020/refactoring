


//修改前
if (!aDate.isBefore(plan.summerStart) && !aDate.isAfter(plan.summerEnd))
    charge = quantity * plan.summerRate;
else
    charge = quantity * plan.regularRate + plan.regularServiceCharge;



// 修改后
if (summer())
    charge = summerCharge();
else
    charge = regularCharge();


/*
动机

   程序之中，复杂的条件逻辑是最常导致复杂度上升的地点之一。
     我必须编写代码来检查不同的条件分支，根据不同的条件做不同的事，然后，我很快就会得到一个相当长的函数。
      大型函数本身就会使代码的可读性下降，而条件逻辑则会使代码更难阅读。
      在带有复杂条件逻辑的函数中，代码（包括检查条件分支的代码和真正实现功能的代码）会告诉我发生的事，
       但常常让我弄不清楚为什么会发生这样的事，这就说明代码的可读性的确大大降低了。

  和任何大块头代码一样，我可以将它分解为多个独立的函数，根据每个小块代码的用途，为分解而得的新函数命名，
    并将原函数中对应的代码改为调用新函数，从而更清楚地表达自己的意图。
    对于条件逻辑，将每个分支条件分解成新函数还可以带来更多好处：可以突出条件逻辑，更清楚地表明每个分支的作用，并且突出每个分支的原因。

 本重构手法其实只是提炼函数（106）的一个应用场景。但我要特别强调这个场景，因为我发现它经常会带来很大的价值。
 */



/*
做法

  对条件判断和每个条件分支分别运用提炼函数（106）手法。

 */














