//修改前
const names = [];
for (const i of input) {
    if (i.job === "programmer") names.push(i.name);
}



//修改后
const names = input
              .filter(i => i.job === "programmer")
              .map(i => i.name);


/**
动机
   与大多数程序员一样，我入行的时候也有人告诉我，迭代一组集合时得使用循环。不过时代在发展，如今越来越多的编程语言都提供了更好的语言结构来处理迭代过程，
这种结构就叫作集合管道（collection pipeline）。
   集合管道[mf-cp]是这样一种技术，它允许我使用一组运算来描述集合的迭代过程，其中每种运算接收的入参和返回值都是一个集合。这类运算有很多种，最常见的则
非map和filter莫属：
      map运算是指用一个函数作用于输入集合的每一个元素上，将集合变换成另外一个集合的过程；
      filter运算是指用一个函数从输入集合中筛选出符合条件的元素子集的过程。运算得到的集合可以供管道的后续流程使用。
我发现一些逻辑如果采用集合管道来编写，代码的可读性会更强——我只消从头到尾阅读一遍代码，就能弄清对象在管道中间的变换过程。
 */


/**
做法

   创建一个新变量，用以存放参与循环过程的集合。
      也可以简单地复制一个现有的变量赋值给新变量。

   从循环顶部开始，将循环里的每一块行为依次搬移出来，在上一步创建的集合变量上用一种管道运算替代之。每次修改后运行测试。

   搬移完循环里的全部行为后，将循环整个删除。

   如果循环内部通过累加变量来保存结果，那么移除循环后，将管道运算的最终结果赋值给该累加变量。
 */
