//修改前
if (false) {
    doSomethingThatUsedToMatter();
}

//修改后
// nothing




/**
动机

   事实上，我们部署到生产环境甚至是用户设备上的代码，从来未因代码量太大而产生额外费用。就算有几行用不上的代码，似乎也不会因此拖慢系统速度，或者占用过
多的内存，大多数现代的编译器还会自动将无用的代码移除。但当你尝试阅读代码、理解软件的运作原理时，无用代码确实会带来很多额外的思维负担。它们周围没有任何
警示或标记能告诉程序员，让他们能够放心忽略这段函数，因为已经没有任何地方使用它了。当程序员花费了许多时间，尝试理解它的工作原理时，却发现无论怎么修改这
段代码都无法得到期望的输出。

   一旦代码不再被使用，我们就该立马删除它。有可能以后又会需要这段代码，但我从不担心这种情况；就算真的发生，我也可以从版本控制系统里再次将它翻找出来。
如果我真的觉得日后它极有可能再度启用，那还是要删掉它，只不过可以在代码里留一段注释，提一下这段代码的存在，以及它被移除的那个提交版本号——但老实讲，我已
经记不得我上次撰写这样的注释是什么时候了，当然也未曾因为不写而感到过遗憾。

   在以前，业界对于死代码的处理态度多是注释掉它。在版本控制系统还未普及、用起来又不太方便的年代，这样做有其道理；但现在版本控制系统已经相当普及。如今
哪怕是一个极小的代码库我都会把它放进版本控制，这些无用代码理应可以放心清理了。
 */


/**
做法

   如果死代码可以从外部直接引用，比如它是一个独立的函数时，先查找一下还有无调用点。

   将死代码移除。

   测试。
 */
