// 修改前
if (this.discountRate)
    base = base - (this.discountRate * base);



// 重构后
assert(this.discountRate>= 0);
if (this.discountRate)
  base = base - (this.discountRate * base);



/*
动机

   常常会有这样一段代码：只有当某个条件为真时，该段代码才能正常运行。例如，平方根计算只对正值才能进行，又例如，某个对象可能假设一组字段中至少有一个不等于null。

   这样的假设通常并没有在代码中明确表现出来，你必须阅读整个算法才能看出。有时程序员会以注释写出这样的假设，
     而我要介绍的是一种更好的技术——使用断言明确标明这些假设。

  断言是一个条件表达式，应该总是为真。如果它失败，表示程序员犯了错误。断言的失败不应该被系统任何地方捕捉。
       整个程序的行为在有没有断言出现的时候都应该完全一样。实际上，有些编程语言中的断言可以在编译期用一个开关完全禁用掉。

  我常看见有人鼓励用断言来发现程序中的错误。这固然是一件好事，但却不是使用断言的唯一理由。
      断言是一种很有价值的交流形式——它们告诉阅读者，程序在执行到这一点时，对当前状态做了何种假设。
      另外断言对调试也很有帮助。而且，因为它们在交流上很有价值，即使解决了当下正在追踪的错误，我还是倾向于把断言留着。
      自测试的代码降低了断言在调试方面的价值，因为逐步逼近的单元测试通常能更好地帮助调试，但我仍然看重断言在交流方面的价值。
 */


/*
做法
  如果你发现代码假设某个条件始终为真，就加入一个断言明确说明这种情况。

  因为断言应该不会对系统运行造成任何影响，所以“加入断言”永远都应该是行为保持的。
*/




















