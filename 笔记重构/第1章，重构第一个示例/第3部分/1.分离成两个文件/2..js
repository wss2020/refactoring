/*
*接下来我将注意力集中到下一个特性改动：支持更多类型的戏剧，以及支持它们各自的价格计算和观众量积分计算。
*  对于现在的结构，我只需要在计算函数里添加分支逻辑即可。
*  amountFor函数清楚地体现了，戏剧类型在计算分支的选择上起着关键的作用——但这样的分支逻辑很容易随代码堆积而腐坏，
*   除非编程语言提供了更基础的编程语言元素来防止代码堆积。

 要为程序引入结构、显式地表达出“计算逻辑的差异是由类型代码确定”有许多途径，
    不过最自然的解决办法还是使用面向对象世界里的一个经典特性——类型多态。
    传统的面向对象特性在JavaScript世界一直备受争议，但新的 ECMAScript 2015规范有意为类和多态引入了一个相当实用的语法糖。
    这说明，在合适的场景下使用面向对象是合理的——显然我们这个就是一个合适的使用场景。


    我的设想是先建立一个继承体系，它有“喜剧”（comedy）和“悲剧”（tragedy）两个子类，子类各自包含独立的计算逻辑。
 调用者通过调用一个多态的amount函数，让语言帮你分发到不同的子类的计算过程中。volumeCredits函数的处理也是如法炮制。
 为此我需要用到多种重构方法，其中最核心的一招是以多态取代条件表达式（272），将多个同样的类型码分支用多态取代。
 但在施展以多态取代条件表达式（272）之前，我得先创建一个基本的继承结构。
 我需要先创建一个类，并将价格计算函数和观众量积分计算函数放进去。我先从检查计算代码开始。
 （之前的重构带来的一大好处是，现在我大可以忽略那些格式化代码，只要不改变中转数据结构就行。
  我可以进一步添加测试来保证中转数据结构不会被意外修改。）

*
* */
















































