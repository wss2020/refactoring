每个行省（province）都有一份生产计划，计划中包含需求量（demand）和采购价格（price）。
每个行省都有一些生产商（producer），他们各自以不同的成本价（cost）供应一定数量的产品。
界面上还会显示，当商家售出所有的商品时，他们可以获得的总收入（full revenue）。
页面底部展示了该区域的产品缺额（需求量减去总产量）和总利润（profit）。
用户可以在界面上修改需求量及采购价格，以及不同生产商的产量（production）和成本价，以观察缺额和总利润的变化。用户在界面上修改任何数值时，其他的数值都会同时得到更新。

这里我展示了一个用户界面，是为了让你了解该应用的使用方式，但我只会聚焦于软件的业务逻辑部分，也就是那些计算利润和缺额的类，而非那些生成HTML或监听页面字段更新的代码。
本章只是先带你走进自测试代码世界的大门，因而最好是从最简单的例子开始，也就是那些不涉及用户界面、持久化或外部服务交互的代码。
这种隔离的思路其实在任何场景下都适用：一旦业务逻辑的部分开始变复杂，我就会把它与UI分离开，以便能更好地理解和测试它。

这块业务逻辑代码涉及两个类：
一个代表了单个生产商（Producer），
另一个用来描述一个行省（Province）。
Province类的构造函数接收一个JavaScript对象，这个对象的内容我们可以想象是由一个JSON文件提供的。
